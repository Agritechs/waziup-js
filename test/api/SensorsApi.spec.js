/**
 * WAZIUP API
 * Applications API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WaziupApi);
  }
}(this, function(expect, WaziupApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WaziupApi.SensorsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SensorsApi', function() {
    describe('domainsDomainSensorsGet', function() {
      it('should call domainsDomainSensorsGet successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsGet
        //instance.domainsDomainSensorsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsPost', function() {
      it('should call domainsDomainSensorsPost successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsPost
        //instance.domainsDomainSensorsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdDelete', function() {
      it('should call domainsDomainSensorsSensorIdDelete successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdDelete
        //instance.domainsDomainSensorsSensorIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdGet', function() {
      it('should call domainsDomainSensorsSensorIdGet successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdGet
        //instance.domainsDomainSensorsSensorIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdLocationPut', function() {
      it('should call domainsDomainSensorsSensorIdLocationPut successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdLocationPut
        //instance.domainsDomainSensorsSensorIdLocationPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsGet', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsGet successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsGet
        //instance.domainsDomainSensorsSensorIdMeasurementsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsMeasurementIdDelete', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsMeasurementIdDelete successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsMeasurementIdDelete
        //instance.domainsDomainSensorsSensorIdMeasurementsMeasurementIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsMeasurementIdDimensionPut', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsMeasurementIdDimensionPut successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsMeasurementIdDimensionPut
        //instance.domainsDomainSensorsSensorIdMeasurementsMeasurementIdDimensionPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsMeasurementIdGet', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsMeasurementIdGet successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsMeasurementIdGet
        //instance.domainsDomainSensorsSensorIdMeasurementsMeasurementIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsMeasurementIdNamePut', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsMeasurementIdNamePut successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsMeasurementIdNamePut
        //instance.domainsDomainSensorsSensorIdMeasurementsMeasurementIdNamePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsMeasurementIdSensorKindPut', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsMeasurementIdSensorKindPut successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsMeasurementIdSensorKindPut
        //instance.domainsDomainSensorsSensorIdMeasurementsMeasurementIdSensorKindPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsMeasurementIdUnitPut', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsMeasurementIdUnitPut successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsMeasurementIdUnitPut
        //instance.domainsDomainSensorsSensorIdMeasurementsMeasurementIdUnitPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsMeasurementIdValuesGet', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsMeasurementIdValuesGet successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsMeasurementIdValuesGet
        //instance.domainsDomainSensorsSensorIdMeasurementsMeasurementIdValuesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsMeasurementIdValuesPost', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsMeasurementIdValuesPost successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsMeasurementIdValuesPost
        //instance.domainsDomainSensorsSensorIdMeasurementsMeasurementIdValuesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdMeasurementsPost', function() {
      it('should call domainsDomainSensorsSensorIdMeasurementsPost successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdMeasurementsPost
        //instance.domainsDomainSensorsSensorIdMeasurementsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdNamePut', function() {
      it('should call domainsDomainSensorsSensorIdNamePut successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdNamePut
        //instance.domainsDomainSensorsSensorIdNamePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('domainsDomainSensorsSensorIdOwnerPut', function() {
      it('should call domainsDomainSensorsSensorIdOwnerPut successfully', function(done) {
        //uncomment below and update the code to test domainsDomainSensorsSensorIdOwnerPut
        //instance.domainsDomainSensorsSensorIdOwnerPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
