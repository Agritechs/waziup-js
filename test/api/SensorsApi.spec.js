/**
 * WAZIUP API
 * Applications API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WaziupApi);
  }
}(this, function(expect, WaziupApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WaziupApi.SensorsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SensorsApi', function() {
    describe('getSensors', function() {
      it('should call getSensors successfully', function(done) {
        //uncomment below and update the code to test getSensors
        //instance.getSensors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSensor', function() {
      it('should call createSensor successfully', function(done) {
        //uncomment below and update the code to test createSensor
        //instance.createSensor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSensor', function() {
      it('should call deleteSensor successfully', function(done) {
        //uncomment below and update the code to test deleteSensor
        //instance.deleteSensor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSensor', function() {
      it('should call getSensor successfully', function(done) {
        //uncomment below and update the code to test getSensor
        //instance.getSensor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSensorLocation', function() {
      it('should call putSensorLocation successfully', function(done) {
        //uncomment below and update the code to test putSensorLocation
        //instance.putSensorLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSensorMeasurements', function() {
      it('should call getSensorMeasurements successfully', function(done) {
        //uncomment below and update the code to test getSensorMeasurements
        //instance.getSensorMeasurements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMeasurement', function() {
      it('should call deleteMeasurement successfully', function(done) {
        //uncomment below and update the code to test deleteMeasurement
        //instance.deleteMeasurement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putMeasurementDimension', function() {
      it('should call putMeasurementDimension successfully', function(done) {
        //uncomment below and update the code to test putMeasurementDimension
        //instance.putMeasurementDimension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeasurement', function() {
      it('should call getMeasurement successfully', function(done) {
        //uncomment below and update the code to test getMeasurement
        //instance.getMeasurement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putMeasurementName', function() {
      it('should call putMeasurementName successfully', function(done) {
        //uncomment below and update the code to test putMeasurementName
        //instance.putMeasurementName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putMeasurementSensorKind', function() {
      it('should call putMeasurementSensorKind successfully', function(done) {
        //uncomment below and update the code to test putMeasurementSensorKind
        //instance.putMeasurementSensorKind(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putMeasurementUnit', function() {
      it('should call putMeasurementUnit successfully', function(done) {
        //uncomment below and update the code to test putMeasurementUnit
        //instance.putMeasurementUnit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeasurementValues', function() {
      it('should call getMeasurementValues successfully', function(done) {
        //uncomment below and update the code to test getMeasurementValues
        //instance.getMeasurementValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addMeasurement', function() {
      it('should call addMeasurement successfully', function(done) {
        //uncomment below and update the code to test addMeasurement
        //instance.addMeasurement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addMeasurement', function() {
      it('should call addMeasurement successfully', function(done) {
        //uncomment below and update the code to test addMeasurement
        //instance.addMeasurement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSensorName', function() {
      it('should call putSensorName successfully', function(done) {
        //uncomment below and update the code to test putSensorName
        //instance.putSensorName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSensorOwner', function() {
      it('should call putSensorOwner successfully', function(done) {
        //uncomment below and update the code to test putSensorOwner
        //instance.putSensorOwner(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
